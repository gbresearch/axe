//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include <string>
#include <map>
#include <vector>
#include <iostream>
#pragma warning(disable:4503)
#include "../include/axe.h"


void test_expression()
{
    std::cout << "--------------------------------------------------------test_expression:\n";
    using namespace axe;
    using namespace axe::shortcuts;
    auto d = 0.0;
    auto ex_rule = r_skip(r_expression(d), _ws) & _z | r_fail([](auto i1, auto i2, auto i3)
    {
        std::cout << "failed at position !:\n"
            << std::string(i1, i2) << '!' << std::string(i2, i3) << "\n";
    });

    std::string exp{ R"*(1+ 2/3* (4.0/5.0+ 3.14) )*" };
    
    if (parse(ex_rule, exp).matched)
        std::cout << "parsing passed: " << d;
    else
        std::cout << "parsing failed";
    std::cout << "\n";
    std::cout << "parse_expression: " << parse_expression(exp, 0.0) << "\n";
    std::cout << "-----------------------------------------------------------------\n";
}