//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include <sstream>
#include <string>
#include <tuple>
#include <optional>
#include <vector>
#include <yadro/util/gbtest.h>
#include "../include/axe.h"

using namespace axe;
using namespace axe::shortcuts;

//-----------------------------------------------------------------------------
// examples using parse_tree function

//-----------------------------------------------------------------------------
auto find_zip(const std::string& text)
{
    std::ostringstream ss;

    // rule to match zip code
    auto zip_rule = _d * 5 & ~('-' & _d * 4) & !_d;
    
    // extracting rule
    auto text_rule = *(*(_ - zip_rule) & zip_rule 
        >> [&](auto i1, auto i2) 
    { 
        ss << std::string(i1, i2) << "\n"; 
    });

    parse(text_rule, text);

    auto text_rule1 = *(*(_ - zip_rule) & zip_rule);
    
    // this is an example of using parse tree to extract data
    // the rule above produces vector of tuple, 
    // we are only interested in second value in that tuple corresponding to zip_rule
    for (auto& d : parse_tree(text_rule1, text).data)
    {
        ss << axe::get_as<std::string>(std::get<1>(d)) << "\n";
    }

    return ss.str();
}

//-----------------------------------------------------------------------------
auto find_tel(const std::string& text)
{
    std::ostringstream ss;

    // four common telephone formats
    auto tel1 = '(' & _d * 3 & ')' & _d * 3 & '-' & _d * 4;
    auto tel2 = _d * 3 & '-' & _d * 3 & '-' & _d * 4;
    auto tel3 = "1-" & _d * 3 & '-' & _d * 3 & '-' & _d * 4;
    auto tel4 = _d * 3 & '.' & _d * 3 & '.' & _d * 4;

    auto tel = tel1 | tel2 | tel3 | tel4;
    // extracting rule
    auto text_rule = *(*(_ - tel) & tel
        >> [&](auto i1, auto i2)
    {
        ss << std::string(i1, i2) << "\n";
    });

    parse(text_rule, text);

    // using parse tree for data extraction
    for (auto p : parse_tree(*(*(_ - tel) & tel), text).data)
    {
        ss << get_as<std::string>(std::get<1>(p)) << "\n";
    }

    return ss.str();
}

namespace
{
    using namespace gb::yadro::util;

    GB_TEST(axe, test_zip)
    {
        auto zips = std::string(R"*(94302 Zip Code
94303-1011 Zip Code
94309 Zip Code
94301 Zip Code
94304 Zip Code
94306 Zip Code
94307)*");

        // both direct extraction and parse_tree functions should return the same results
        gbassert(find_zip(zips) == R"*(94302
94303-1011
94309
94301
94304
94306
94307
94302
94303-1011
94309
94301
94304
94306
94307
)*");
    }

    GB_TEST(axe, test_tel)
    {
        auto tels = std::string(R"*(call City Hall at (650)329-2100
Police Desk at 329-2406
Phone: 650-329-2258, Fax: 650-617-3120
1505 Meridian, San Jose, CA
Phone: 408-278-7400
94307)*");

        // both direct extraction and parse_tree functions should return the same results
        gbassert(find_tel(tels) == R"*((650)329-2100
650-329-2258
650-617-3120
408-278-7400
(650)329-2100
650-329-2258
650-617-3120
408-278-7400
)*");
    }
}