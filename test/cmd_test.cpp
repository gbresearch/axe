//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include <string>
#include <map>
#include <vector>
#include <sstream>
#pragma warning(disable:4503)
#include "../include/axe.h"
#include <yadro/util/gbtest.h>

struct parsed_cmd
{
    bool matched;
    std::string cmd_error;
    std::string exe_name;
    std::map<std::string, std::string> key_map;
    std::vector<std::string> parameters;
};

parsed_cmd parse_cmd_line(const std::string& cmd)
{
    using namespace axe;
    using namespace axe::shortcuts;

    // data to be gathered
    parsed_cmd res{};
    
    // executable rule: file.extension
    auto executable = r_alnumstr() & *('.' & r_alnumstr());
    
    // key rule
    std::string key_name;
    auto key = r_alnumstr() >> key_name >> [&]() { res.key_map[key_name]; };
    
    // value rule
    auto value = r_alnumstr() >> [&](auto i1, auto i2)
    { res.key_map[key_name] = std::string(i1, i2); };

    // parameter rule
    auto parameter = r_alnumstr() >> e_push_back(res.parameters);

    // rule for key-value pairs
    auto key_value = '-' & key & ~(*_s & '=' & *_s & value);
    auto command_line = executable >> res.exe_name
        & *(+_s & key_value)
        & *(+_s & parameter) & _endl
        | r_fail([&](auto, auto i2, auto i3)
    { 
        res.cmd_error.assign(i2, i3);
    });

    auto result = command_line(cmd.begin(), cmd.end());
    res.matched = result.matched;
    return res;
}

namespace
{
    GB_TEST(axe, test_cmd)
    {
        using namespace gb::yadro::util;
        auto res = parse_cmd_line("command.exe -t=123 -h -p = p_value one two three");
        gbassert(res.matched);
        gbassert(res.exe_name == "command.exe");
        std::stringstream ss;
        ss << "Key-value pairs:" << std::endl;
        for (auto& i : res.key_map)
            ss << "    " << i.first << " = " << i.second << std::endl;
        ss << "Parameters:" << std::endl;
        for (auto& p : res.parameters)
            ss << "    " << p << std::endl;
        
        auto golden = R"*(Key-value pairs:
    h = 
    p = p_value
    t = 123
Parameters:
    one
    two
    three
)*";
        gbassert(ss.str() == golden);
        res = parse_cmd_line(".wrong.");
        gbassert(!res.matched);
        gbassert(res.cmd_error == ".wrong.");
    }
}
