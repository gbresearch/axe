//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include <string>
#include <map>
#include <vector>
#include <iostream>
#pragma warning(disable:4503)
#include "../include/axe.h"

template<class CharT>
class format_t
{
    using StringT = std::basic_string<CharT>;

public:
    format_t(format_t&& f)
        : os(f.os), strings(std::move(f.strings)), index(f.index)
    {
        f.os = nullptr;
        f.index = 0;
    }

    format_t(const StringT& format_string) : os(nullptr), index(0)
    {
        using namespace axe::shortcuts;

        auto percent = "%%"_axe;

        auto plain_text = +(_ - "%%" - ('%' & _uint));
        auto format = 
            *(
            plain_text >> axe::e_push_back(strings)
            | "%%"_axe >> [this](auto i1, auto i2) { strings.emplace_back(i1, i2); }
            | '%' & _uint >> axe::e_push_back(strings)
            )
            & _z
            | axe::r_fail([](auto i1, auto i2)
        {
            throw StringT(i1, i2);
        });

        format(format_string.begin(), format_string.end());
    }

    ~format_t()
    {
        flush();
    }

    void flush()
    {
        if (os)
        {
            std::for_each(strings.begin(), strings.end(),
                [this](auto&& str) { *os << str; });
        }
        os = nullptr;
    }

    template<class T>
    format_t<CharT>& operator<< (const T& t)
    {
        std::basic_ostringstream<CharT> ss;
        ss << (CharT)('%') << ++index;
        StringT index_str = ss.str();
        bool found = false; // at least one format found
        std::for_each(strings.begin(), strings.end(),
            [&index_str, &t, &found](StringT& str)
        {
            if (str == index_str)
            {
                str = format_t<CharT>::to_string(t);
                found = true;
            }
        });

        if (!found)
        { // no format found for this argument, include it verbatim
            strings.push_back(to_string(t));
        }

        return *this;
    }

private:
    template<class C>
    friend format_t<C> operator<< (std::basic_ostream<C>& os, format_t<C>&& f);
    
    std::basic_ostream<CharT>* os;
    std::vector<StringT> strings;
    unsigned index;

    template<class T>
    static StringT to_string(const T& t)
    {
        std::basic_ostringstream<CharT> tmp;
        tmp << t;
        return tmp.str();
    }

    format_t(const format_t&) = delete;
};

template<class C>
format_t<C> operator<< (std::basic_ostream<C>& os, format_t<C>&& f)
{
    f.os = &os;
    return std::move(f);
}

format_t<char> format(std::string str)
{
    return format_t<char>(std::move(str));
}

format_t<wchar_t> format(std::wstring str)
{
    return format_t<wchar_t>(std::move(str));
}

void test_format()
{
    // TBD
    std::cout << "--------------------------------------------------------test_format:\n";
    // using lvalue
    auto fmt = format("Example 1\nCatalog #%1.\nBook Title: %2, Author: %3\n");
    fmt << 12345 << "Alice's Adventures in Wonderland" << "Charles Lutwidge Dodgson";
    std::cout << std::move(fmt); // operator<< is overloaded for rvalue references
    // using rvalue
    std::wcout << format(L"Example 2\nSymbol: %1, ROI: %2%%\n") << L"AAPL" << 380;
    std::cout << "\n-----------------------------------------------------------------\n";
}
