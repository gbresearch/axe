//-----------------------------------------------------------------------------
//  Copyright (C) 2011-2022, Gene Bushuyev
//  
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------

#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <utility>
#pragma warning(disable:4503)
#include "../include/axe.h"
#include <yadro/util/gbtest.h>

template<class CharT>
class format_t
{
    using StringT = std::basic_string<CharT>;

public:
    format_t(const StringT& format_string)
    {
        using namespace axe::shortcuts;

        auto percent = "%%"_axe;
        auto param_holder = '%' & _uint;
        auto plain_text = +(_ - +percent - param_holder);
        auto format = 
            *(
            plain_text >> axe::e_push_back(_strings)
            | "%%"_axe >> [&] { _strings.emplace_back(1, '%'); }
            | param_holder >> axe::e_push_back(_strings)
            )
            & _z
            | axe::r_fail([](auto i1, auto i2)
        {
            throw std::runtime_error("parsing failed");
        });

        format(format_string.begin(), format_string.end());
    }

    template<class ... Ts>
    auto operator()(Ts&&... ts) const
    {
        auto strings = _strings;
        auto index = 0;
        
        (substitute(strings, index, ts), ...);

        std::basic_string<CharT> result;
        std::for_each(strings.begin(), strings.end(),
            [&](auto&& str) { result += str; });
        return result;
    }

private:
    std::vector<StringT> _strings;

    template<class T>
    static auto to_string(const T& t)
    {
        std::basic_ostringstream<CharT> tmp;
        tmp << t;
        return tmp.str();
    }

    template<class T>
    static auto substitute(auto& strings, auto& index, const T& t)
    {
        auto found = false; // at least one format found
        auto index_str = CharT('%') + to_string(index);
        std::for_each(strings.begin(), strings.end(),
            [&](auto& str)
            {
                if (str == index_str)
                {
                    std::basic_ostringstream<CharT> oss;
                    oss << t;
                    str = oss.str();
                    found = true;
                }
            });

        if (!found)
        { // no format found for this argument, include it verbatim
            strings.push_back(to_string(t));
        }
        ++index;
    }
};

auto format(std::string str)
{
    return format_t<char>(std::move(str));
}

auto format(std::wstring str)
{
    return format_t<wchar_t>(std::move(str));
}

namespace
{
    using namespace gb::yadro::util;

    GB_TEST(axe, test_format)
    {
        auto fmt = format("Example 1\nCatalog #%0\nBook Title: %1\nAuthor: %2\n");
        gbassert(fmt(12345, "Alice's Adventures in Wonderland", "Charles Lutwidge Dodgson") == R"*(Example 1
Catalog #12345
Book Title: Alice's Adventures in Wonderland
Author: Charles Lutwidge Dodgson
)*");
        gbassert(format(L"Example 2\nSymbol: %0, ROI: %1%%\n")(L"AAPL", 380) == LR"*(Example 2
Symbol: AAPL, ROI: 380%
)*");
    }
}